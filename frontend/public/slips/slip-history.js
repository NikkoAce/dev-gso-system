// FILE: frontend/public/slip-history.js
import { fetchWithAuth } from '../js/api.js';
import { createUIManager } from '../js/ui.js';
import { createAuthenticatedPage } from '../js/page-loader.js';

createAuthenticatedPage({
    permission: 'slip:read',
    pageInitializer: initializeSlipHistoryPage,
    pageName: 'Slip History'
});

function initializeSlipHistoryPage(user) {
    // --- STATE MANAGEMENT ---
    let allSlips = []; // Master list of all slips fetched from the server
    let currentPage = 1;
    const itemsPerPage = 20;
    const { renderPagination } = createUIManager();

    // --- DOM ELEMENTS ---
    const slipTypeFilter = document.getElementById('slip-type-filter');
    const searchInput = document.getElementById('slip-search-input');
    const paginationControls = document.getElementById('pagination-controls');
    const slipDetailsModal = document.getElementById('slip-details-modal');
    const modalCustodianRow = document.getElementById('modal-custodian-row');
    const modalFromToRow = document.getElementById('modal-from-to-row');
    const modalTransferDateRow = document.getElementById('modal-transfer-date-row');
    const tableBody = document.getElementById('slip-history-table-body');

    // --- UTILITY FUNCTIONS ---
    const formatDate = (dateString) => dateString ? new Date(dateString).toLocaleDateString('en-CA') : 'N/A';
    const formatCurrency = (value) => new Intl.NumberFormat('en-PH', { style: 'currency', currency: 'PHP' }).format(value || 0);
    const formatDateTime = (dateString) => dateString ? new Date(dateString).toLocaleString('en-CA', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }) : 'N/A';

    // --- RENDERING ---
    function renderSlipTable(slips, pagination) {
        tableBody.innerHTML = '';
        if (slips.length === 0) {
            tableBody.innerHTML = `<tr><td colspan="6" class="text-center py-8 text-gray-500">No slips found for the selected criteria.</td></tr>`;
            // Ensure pagination controls are cleared if no slips are found
            renderPagination(paginationControls, {
                currentPage: 1,
                totalPages: 0,
                totalDocs: 0,
                itemsPerPage
            });
            renderPagination(paginationControls, { currentPage: 1, totalPages: 0, totalDocs: 0, itemsPerPage });
            return;
        }

        let rowsHTML = '';
        slips.forEach(slip => {
            let custodianDisplay = '';
            if (slip.slipType === 'PTR') {
                custodianDisplay = `
                    <div class="font-medium text-gray-900">From: ${slip.from.name}</div>
                    <div class="font-medium text-gray-900">To: ${slip.to.name}</div>
                    <div class="text-gray-500 text-xs">${slip.from.office} &rarr; ${slip.to.office}</div>
                `;
            } else if (slip.custodian) {
                custodianDisplay = `
                    <div class="font-medium text-gray-900">${slip.custodian.name}</div>
                    <div class="text-gray-500 text-xs">${slip.custodian.office}</div>
                `;
            } else if (slip.user) { // For slips like IIRUP and A68 that have a user but no custodian
                custodianDisplay = `
                    <div class="font-medium text-gray-900">Generated by: ${slip.user.name}</div>
                `;
            }
            
            const typeBadgeClass = slip.slipType === 'PAR' ? 'badge-success' :
                                   slip.slipType === 'ICS' ? 'badge-info' :
                                   'badge-warning'; // For PTR

            rowsHTML += `
                <tr>
                    <td data-label="Slip No." class="font-medium">${slip.number}</td>
                    <td data-label="Type"><span class="badge ${typeBadgeClass} badge-sm">${slip.slipType}</span></td>
                    <td data-label="Custodian">${custodianDisplay}</td>
                    <td data-label="Items">${slip.assets.length}</td>
                    <td data-label="Date">${formatDate(slip.issuedDate)}</td>
                    <td data-label="Actions" class="text-center non-printable">
                        <div class="flex justify-center items-center gap-1">
                            <button class="view-slip-btn btn btn-ghost btn-xs" data-id="${slip._id}" title="View Details"><i data-lucide="eye" class="h-4 w-4"></i></button>
                            <button class="reprint-btn btn btn-ghost btn-xs" data-id="${slip._id}" data-type="${slip.slipType}" title="Reprint Slip"><i data-lucide="printer" class="h-4 w-4"></i></button>
                        </div>
                    </td>
                </tr>
            `;
        });
        tableBody.innerHTML = rowsHTML;
        lucide.createIcons();
        renderPagination(paginationControls, pagination);
    }

    // --- CORE LOGIC ---
    function applyFiltersAndRender() {
        const searchTerm = searchInput.value.toLowerCase();
        const type = slipTypeFilter.value;

        // 1. Apply filters to the master list
        const filteredSlips = allSlips.filter(slip => {
            const typeMatch = !type || slip.slipType === type; // Use !type to check for empty string ""
            const searchMatch = !searchTerm ||
                (slip.number && slip.number.toLowerCase().includes(searchTerm)) ||
                (slip.custodian && slip.custodian.name.toLowerCase().includes(searchTerm)) ||
                (slip.from && slip.from.name.toLowerCase().includes(searchTerm)) || (slip.to && slip.to.name.toLowerCase().includes(searchTerm));
            return typeMatch && searchMatch;
        });

        // 2. Apply pagination to the filtered list
        const totalDocs = filteredSlips.length;
        const totalPages = Math.ceil(totalDocs / itemsPerPage);
        if (currentPage > totalPages) {
            currentPage = totalPages || 1;
        }
        const startIndex = (currentPage - 1) * itemsPerPage;
        const paginatedSlips = filteredSlips.slice(startIndex, startIndex + itemsPerPage);

        // 3. Render the result
        const paginationData = { totalDocs, totalPages, currentPage, itemsPerPage };
        renderSlipTable(paginatedSlips, paginationData);
    }

    // --- MODAL & DATA FETCHING ---
    async function loadInitialSlips() {
        tableBody.innerHTML = `<tr><td colspan="6" class="text-center p-8"><i data-lucide="loader-2" class="animate-spin h-8 w-8 mx-auto text-gray-500"></i></td></tr>`;
        lucide.createIcons();
        try {
            // Fetch ALL slips once, without backend filtering or pagination
            const data = await fetchWithAuth('slips');
            allSlips = Array.isArray(data) ? data : [];
            currentPage = 1;
            applyFiltersAndRender(); // Initial render
        } catch (error) {
            console.error('Failed to fetch slip history:', error);
            tableBody.innerHTML = `<tr><td colspan="6" class="text-center p-8 text-red-500">Error loading slip history.</td></tr>`;
        }
    }

    async function showSlipDetails(slipId) {
        const slip = await fetchWithAuth(`slips/${slipId}`);
        
        // Populate common fields
        document.getElementById('modal-title').textContent = `${slip.slipType} Details`;
        document.getElementById('modal-slip-number').textContent = slip.number;

        // Toggle visibility and populate based on slip type
        if (slip.slipType === 'PTR') {
            modalCustodianRow.classList.add('hidden');
            modalFromToRow.classList.remove('hidden');
            modalTransferDateRow.classList.remove('hidden');
            document.querySelector('#modal-slip-issued').parentElement.classList.add('hidden');
            document.querySelector('#modal-slip-received').parentElement.classList.add('hidden');

            document.getElementById('modal-slip-from').textContent = `${slip.from.name} (${slip.from.office})`;
            document.getElementById('modal-slip-to').textContent = `${slip.to.name} (${slip.to.office})`;
            document.getElementById('modal-slip-transfer-date').textContent = formatDate(slip.date);
        } else {
            modalCustodianRow.classList.remove('hidden');
            modalFromToRow.classList.add('hidden');
            modalTransferDateRow.classList.add('hidden');
            document.querySelector('#modal-slip-issued').parentElement.classList.remove('hidden');
            document.querySelector('#modal-slip-received').parentElement.classList.remove('hidden');

            document.getElementById('modal-slip-custodian').textContent = slip.custodian.name;
            document.getElementById('modal-slip-issued').textContent = formatDate(slip.issuedDate);
            document.getElementById('modal-slip-received').textContent = formatDate(slip.receivedDate);
        }

        const assetsTableBody = document.getElementById('modal-slip-assets-table');
        assetsTableBody.innerHTML = '';
        slip.assets.forEach(asset => {
            let desc = asset.description;
            if(asset.specifications && asset.specifications.length > 0) {
                const specs = asset.specifications.map(s => `${s.key}: ${s.value}`).join(', ');
                desc += ` (${specs})`;
            }
            const row = `
                <tr>
                    <td>${asset.propertyNumber}</td>
                    <td>${desc}</td>
                    <td class="text-right">${formatCurrency(asset.acquisitionCost)}</td>
                </tr>
            `;
            assetsTableBody.innerHTML += row;
        });

        slipDetailsModal.showModal();
    }

    // --- EVENT LISTENERS ---
    [slipTypeFilter, searchInput].forEach(el => {
        el.addEventListener('input', () => {
            currentPage = 1;
            applyFiltersAndRender();
        });
    });
    
    paginationControls.addEventListener('click', (e) => {
        const paginationData = JSON.parse(e.currentTarget.dataset.pagination || '{}');
        if (e.target && e.target.id === 'prev-page-btn') {
            if (currentPage > 1) {
                currentPage--;
                applyFiltersAndRender();
            }
        }
        if (e.target && e.target.id === 'next-page-btn') {
            if (currentPage < paginationData.totalPages) {
                currentPage++;
                applyFiltersAndRender();
            }
        }
    });

    document.getElementById('slip-history-table-body').addEventListener('click', (e) => {
        const viewButton = e.target.closest('.view-slip-btn');
        if (viewButton) {
            const slipId = viewButton.dataset.id;
            showSlipDetails(slipId);
            return;
        }

        const reprintButton = e.target.closest('.reprint-btn');
        if (reprintButton) {
            const slipId = reprintButton.dataset.id;
            // Find the slip from the master list to avoid another fetch
            const slipToReprint = allSlips.find(s => s._id === slipId);
            if (!slipToReprint) return;

            const slipType = slipToReprint.slipType;
            if (slipType === 'PAR') {
                localStorage.setItem('parToReprint', JSON.stringify(slipToReprint));
                window.location.href = './par-page.html';
            } else if (slipType === 'ICS') {
                localStorage.setItem('icsToReprint', JSON.stringify(slipToReprint));
                window.location.href = './ics-page.html';
            } else if (slipType === 'PTR') {
                localStorage.setItem('ptrToReprint', JSON.stringify(slipToReprint));
                window.location.href = './ptr.html'; // Navigate to the PTR page
            } else if (slipType === 'IIRUP') {
                localStorage.setItem('reprintIIRUP', JSON.stringify(slipToReprint));
                window.location.href = './iirup-page.html';
            } else if (slipType === 'A68') {
                localStorage.setItem('reprintA68', JSON.stringify(slipToReprint));
                window.location.href = './appendix68-page.html';
            }
        }
    });

    document.getElementById('close-slip-modal').addEventListener('click', () => {
        slipDetailsModal.close();
    });

    // --- INITIALIZATION ---
    loadInitialSlips();
}
